@import "../../styles/index";

$button-variants: ("contained", "outlined", "text");

$button-colors: (
  primary: (
    main: $color-primary-main,
    contrastText: $color-primary-contrastText,
    outlinedBorder: $color-primary-outlinedBorder,
    dark: $color-primary-dark,
    selected: $color-primary-selected,
    focus: $color-primary-focus,
    focusVisible: $color-primary-focusVisible,
  ),
  secondary: (
    main: $color-secondary-main,
    contrastText: $color-secondary-contrastText,
    outlinedBorder: $color-secondary-outlinedBorder,
    dark: $color-secondary-dark,
    selected: $color-secondary-selected,
    focus: $color-secondary-focus,
    focusVisible: $color-secondary-focusVisible,
  ),
  error: (
    main: $color-error-main,
    contrastText: $color-error-contrastText,
    outlinedBorder: $color-error-outlinedBorder,
    dark: $color-error-dark,
    selected: $color-error-selected,
    focus: $color-error-focus,
    focusVisible: $color-error-focusVisible,
  ),
  warning: (
    main: $color-warning-main,
    contrastText: $color-warning-contrastText,
    outlinedBorder: $color-warning-outlinedBorder,
    dark: $color-warning-dark,
    selected: $color-warning-selected,
    focus: $color-warning-focus,
    focusVisible: $color-warning-focusVisible,
  ),
  info: (
    main: $color-info-main,
    contrastText: $color-info-contrastText,
    outlinedBorder: $color-info-outlinedBorder,
    dark: $color-info-dark,
    selected: $color-info-selected,
    focus: $color-info-focus,
    focusVisible: $color-info-focusVisible,
  ),
  success: (
    main: $color-success-main,
    contrastText: $color-success-contrastText,
    outlinedBorder: $color-success-outlinedBorder,
    dark: $color-success-dark,
    selected: $color-success-selected,
    focus: $color-success-focus,
    focusVisible: $color-success-focusVisible,
  ),
);

$button-padding-small: 8px 16px;
$button-padding-medium: 12px 24px;
$button-padding-large: 16px 32px;

$button-border-radius: 4px;

.button {
  border-radius: $button-border-radius;
  font-family: $font-family;
  font-weight: $font-weight-semibold;

  // Sizes
  &--small {
    padding: $button-padding-small;
  }
  &--medium {
    padding: $button-padding-medium;
    font-size: $font-size-body2;
  }
  &--large {
    padding: $button-padding-large;
    font-size: $font-size-body1;
  }

  // Variants and Colors
  @each $color-name, $color-values in $button-colors {
    @each $variant in $button-variants {
      &--#{$color-name}.button--#{$variant} {
        @if $variant == "contained" {
          background-color: map-get($color-values, main);
          color: map-get($color-values, contrastText);
          border: none;
          box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2);
          transition:
            background-color 0.3s ease,
            color 0.3s ease-in-out;

          &:hover {
            background-color: map-get($color-values, dark);
          }

          &:active {
            background-color: map-get($color-values, selected);
          }

          &:focus {
            background-color: map-get($color-values, focusVisible);
          }

          &:focus-visible {
            background-color: map-get($color-values, focusVisible);
          }
        } @else if $variant == "outlined" {
          background-color: transparent;
          color: map-get($color-values, main);
          border: 1px solid map-get($color-values, outlinedBorder);
          box-shadow: none;
          transition:
            background-color 0.3s ease,
            color 0.3s ease-in-out;

          &:hover {
            background-color: map-get($color-values, focus);
          }

          &:active {
            background-color: map-get($color-values, selected);
          }

          &:focus {
            background-color: map-get($color-values, focusVisible);
          }

          &:focus-visible {
            background-color: map-get($color-values, focusVisible);
          }
        } @else if $variant == "text" {
          background-color: transparent;
          color: map-get($color-values, main);
          border: none;
          box-shadow: none;
          transition:
            background-color 0.3s ease,
            color 0.3s ease-in-out;

          &:hover {
            background-color: map-get($color-values, focus);
          }

          &:active {
            background-color: map-get($color-values, selected);
          }

          &:focus {
            background-color: map-get($color-values, focusVisible);
          }

          &:focus-visible {
            background-color: map-get($color-values, focusVisible);
          }
        }
      }
    }

    // Additional hover styles for just `&--color`
    &--#{$color-name} {
      &:hover {
        background-color: map-get($color-values, dark);
      }

      &:active {
        background-color: map-get($color-values, selected);
      }

      &:focus {
        background-color: map-get($color-values, focus);
      }

      &:focus-visible {
        background-color: map-get($color-values, focusVisible);
      }
    }
  }

  // Generic variants
  &--contained {
    box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2);
    border: none;
  }

  &--outlined,
  &--text {
    background-color: transparent;
    border: none;
    box-shadow: none;
  }

  &--contained:disabled,
  &--contained.button--isLoading {
    background-color: $color-disabled;
    color: $color-text-disabled;
    cursor: not-allowed;
    border: none;

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      background-color: $color-disabled;
      color: $color-text-disabled;
    }
  }

  &--outlined:disabled,
  &--outlined.button--isLoading {
    border: 1px solid $color-disabled;
    color: $color-text-disabled;

    cursor: not-allowed;

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      background-color: transparent;
      color: $color-text-disabled;
    }
  }

  &--text:disabled,
  &--text.button--isLoading {
    border: none;
    color: $color-text-disabled;
    cursor: not-allowed;

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      background-color: transparent;
    }
  }

  &--inherit {
    color: $color-text-primary;
    @extend .inherit-button;
  }

  &--inherit.button--outlined {
    border: 1px solid $color-text-primary;
  }

  &--inherit-white {
    color: white;
    @extend .inherit-button;
  }

  &--inherit.button--outlined {
    border: 1px solid white;
  }

  &__loading-state {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center; // vertically center spinner and text

    &__spinner {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      border: 3px solid #eee;
      display: inline-block;
      position: relative; 
      margin-right: 2px;

      &:after,
      &:before {
        content: "";
        display: block;
        width: 15px;
        height: 15px;
        border-radius: 50%;
      }

      &:after {
        position: absolute;
        top: -3px;
        left: -3px;
        border: 3px solid transparent;
        border-top-color: #928a8a;
        animation: spin 1s linear infinite;
      }
    }

    &__loading {
      margin-left: 8px;
    }
  }
}

.inherit-button {
  background-color: inherit;

  &:hover {
    background-color: rgba(transparent, $opacity-hover);
  }
  &:active {
    background-color: rgba(transparent, $opacity-selected);
  }
  &:focus {
    background-color: rgba(transparent, $opacity-focus);
  }
  &:focus-visible {
    background-color: rgba(transparent, $opacity-focusVisible);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}
